#!/bin/sh

set -e

cat > /etc/dnscloudflare.ini << EOF
# CloudFlare API key information
dns_cloudflare_api_token = ${CLOUDFLARE_API_TOKEN}
EOF
chmod 600 /etc/dnscloudflare.ini

if openssl x509 -checkend 86400 -noout -in /etc/letsencrypt/live/${MAP_HOSTNAME}/fullchain.pem 2>/dev/null;
then
  echo "Certificate ${MAP_HOSTNAME} is good for another day!"
else
  echo "Certificate ${MAP_HOSTNAME} has expired or doesn't exist!"
  certbot certonly -m ${ACME_EMAIL} -d ${MAP_HOSTNAME} --agree-tos -n --dns-cloudflare --dns-cloudflare-propagation-seconds 120 --dns-cloudflare-credentials /etc/dnscloudflare.ini
fi

if openssl x509 -checkend 86400 -noout -in /etc/letsencrypt/live/${SITE_HOSTNAME}/fullchain.pem 2>/dev/null;
then
  echo "Certificate ${SITE_HOSTNAME} is good for another day!"
else
  echo "Certificate ${SITE_HOSTNAME} has expired or doesn't exist!"
  certbot certonly -m ${ACME_EMAIL} -d ${SITE_HOSTNAME} --agree-tos -n --dns-cloudflare --dns-cloudflare-propagation-seconds 120 --dns-cloudflare-credentials /etc/dnscloudflare.ini
fi

if [ ! -f /etc/letsencrypt/ssl-dhparams.pem ]; then
  openssl dhparam -out /etc/letsencrypt/ssl-dhparams.pem 2048
fi

(crontab -l 2>/dev/null; echo "0 0 * * * certbot renew") | crontab -

cat <<EOF > /etc/nginx/nginx.conf
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /dev/stdout  main;
    error_log  /dev/stderr  notice;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}

stream {
    upstream backend {
        server ${SERVER_IP}:${SERVER_PORT};
    }

    server {
        listen     25565;
        proxy_pass backend;
    }

    server {
        listen     ${SERVER_PORT};
        proxy_pass backend;
    }
}
EOF

cat <<EOF > /etc/nginx/conf.d/default.conf
server {
    listen 443 ssl;
    http2 on;
    server_name ${SITE_HOSTNAME};
    ssl_certificate /etc/letsencrypt/live/${SITE_HOSTNAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SITE_HOSTNAME}/privkey.pem;
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    root /usr/share/nginx/html;
    index index.html index.htm;
    location / {
        try_files \$uri \$uri/ /index.html;
    }
    location /health {
        return 200;
    }
}

server {
    listen 80;
    server_name _;

    location / {
        return 301 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name ${MAP_HOSTNAME};
    ssl_certificate /etc/letsencrypt/live/${MAP_HOSTNAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${MAP_HOSTNAME}/privkey.pem;
    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    index index.html index.htm;
    location / {
        proxy_pass http://${SERVER_IP}:${MAP_PORT};
        proxy_redirect off;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        break;
    }
}
EOF

exec s6-svscan /etc/s6
